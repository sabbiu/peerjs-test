{"version":3,"sources":["App.js","useAutomerge.js","reportWebVitals.js","index.js"],"names":["App","useState","peer","setPeer","userId","setUserId","initialDoc","React","Automerge","from","doc","setDoc","useCallback","message","change","useAutomerge","users","tickets","updateDoc","sendData","data","conn","connect","on","send","useEffect","save","draft","newPeer","Peer","console","log","newDoc","merge","load","destroy","className","id","value","onChange","e","target","onClick","sup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA8EeA,MAzEf,WACE,MAAwBC,qBAAU,mBAA3BC,EAAI,KAAEC,EAAO,KACpB,EAA4BF,mBAAS,IAAG,mBAAjCG,EAAM,KAAEC,EAAS,KACxB,ECLK,SAAsBC,GAC3B,MAAsBC,IAAMN,UAAS,kBACnCO,IAAUC,KAA2B,oBAAfH,EAA4BA,IAAeA,EAAW,IAC7E,mBAFMI,EAAG,KAAEC,EAAM,KAIlB,MAAO,CACLD,EACAH,IAAMK,aACJ,SAACC,GACCF,EAAOH,IAAUM,OAAOJ,EAAKG,GAC/B,GACA,CAACH,IAEHC,EAEJ,CDVmCI,CAAa,CAC5CC,MAAO,GACPC,QAAS,KACT,mBAHKP,EAAG,KAAEQ,EAAS,KAAEP,EAAM,KA0C7B,SAASQ,EAASC,GAChB,GAAKlB,EAAL,CAEA,IAAMmB,EAAOnB,EAAKoB,QAAQlB,GAC1BiB,EAAKE,GAAG,QAAQ,WAEdF,EAAKG,KAAKJ,EACZ,GANiB,CAOnB,CAEA,OA/CAK,qBAAU,WACRN,EAASX,IAAUkB,KAAKhB,GAC1B,GAAG,CAACA,IAEJe,qBAAU,WACRP,GAAU,SAACS,GACTA,EAAMX,MAAQ,CAAC,SACjB,GACF,GAAG,IAWHS,qBAAU,WACR,IAAMG,EAAU,IAAIC,IAcpB,OAZAD,EAAQL,GAAG,QAAQ,kBAAMpB,EAAQyB,EAAQ,IACzCA,EAAQL,GAAG,cAAc,SAAUF,GACjCA,EAAKE,GAAG,QAAQ,SAAUH,GAGxB,GADAU,QAAQC,IAAIX,GACRA,GAAiB,OAATA,EAAe,CACzB,IAAMY,EAASxB,IAAUyB,MAAMvB,EAAKF,IAAU0B,KAAKd,IACnDT,EAAOqB,EACT,CACF,GACF,IAEO,kBAAMJ,EAAQO,SAAU,CACjC,GAAG,IAaD,qBAAKC,UAAU,MAAK,SACjBlC,EACC,gCACE,yEACA,8BAAMA,EAAKmC,KACX,uBAAOC,MAAOlC,EAAQmC,SAAU,SAACC,GAAC,OAAKnC,EAAUmC,EAAEC,OAAOH,MAAM,IAChE,wBAAQI,QAAS,kBAAMvB,EAAS,KAAK,EAAC,oBACtC,8BAAMT,EAAIM,QACV,wBAAQ0B,QAAS,kBA7CvBZ,QAAQC,IAAI,mBACZb,GAAU,SAACS,GACT,IAAIgB,EAAG,sBAAOjC,EAAIM,OAAK,CAAE,YACzBc,QAAQC,IAAIY,GACZhB,EAAMX,MAAQ2B,CAChB,GAwCgD,EAAC,0BAG7C,uCAIR,EEhEeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.2b5e652b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Peer from \"peerjs\";\nimport { useAutomerge } from \"./useAutomerge\";\nimport Automerge from \"automerge\";\n\nfunction App() {\n  const [peer, setPeer] = useState();\n  const [userId, setUserId] = useState(\"\");\n  const [doc, updateDoc, setDoc] = useAutomerge({\n    users: [],\n    tickets: [],\n  });\n\n  useEffect(() => {\n    sendData(Automerge.save(doc));\n  }, [doc]);\n\n  useEffect(() => {\n    updateDoc((draft) => {\n      draft.users = [\"sabbiu\"];\n    });\n  }, []);\n\n  const sendAutomergeData = () => {\n    console.log(\"sending...\");\n    updateDoc((draft) => {\n      let sup = [...doc.users, \"newuser\"];\n      console.log(sup);\n      draft.users = sup;\n    });\n  };\n\n  useEffect(() => {\n    const newPeer = new Peer();\n\n    newPeer.on(\"open\", () => setPeer(newPeer));\n    newPeer.on(\"connection\", function (conn) {\n      conn.on(\"data\", function (data) {\n        // Will print 'hi!'\n        console.log(data);\n        if (data && data !== \"hi\") {\n          const newDoc = Automerge.merge(doc, Automerge.load(data));\n          setDoc(newDoc);\n        }\n      });\n    });\n\n    return () => newPeer.destroy();\n  }, []);\n\n  function sendData(data) {\n    if (!peer) return;\n\n    const conn = peer.connect(userId);\n    conn.on(\"open\", function () {\n      // here you have conn.id\n      conn.send(data);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      {peer ? (\n        <div>\n          <p>lorem ipsums lakdfj lsadk fljksd flksjdf</p>\n          <pre>{peer.id}</pre>\n          <input value={userId} onChange={(e) => setUserId(e.target.value)} />\n          <button onClick={() => sendData(\"hi\")}>Submit</button>\n          <pre>{doc.users}</pre>\n          <button onClick={() => sendAutomergeData()}>Send Data</button>\n        </div>\n      ) : (\n        <div>sup</div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useEffect } from \"react\";\nimport Automerge from \"automerge\";\n\nexport function useAutomerge(initialDoc) {\n  const [doc, setDoc] = React.useState(() =>\n    Automerge.from(typeof initialDoc === \"function\" ? initialDoc() : initialDoc)\n  );\n\n  return [\n    doc,\n    React.useCallback(\n      (message) => {\n        setDoc(Automerge.change(doc, message));\n      },\n      [doc]\n    ),\n    setDoc,\n  ];\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}